/// <reference path="../types/index.d.ts" />
import Scope from './scope';
import { CollectionProxy, RecordProxy } from './proxies';
export default class Model {
    static baseUrl: string;
    static apiNamespace: string;
    static jsonapiType: string;
    static endpoint: string;
    static isJWTOwner: boolean;
    static jwt: string;
    static parentClass: typeof Model;
    static camelizeKeys: boolean;
    id: string;
    temp_id: string;
    _attributes: Object;
    _originalAttributes: Object;
    _originalRelationships: Object;
    relationships: Object;
    errors: Object;
    __meta__: Object | void;
    _persisted: boolean;
    _markedForDestruction: boolean;
    _markedForDisassociation: boolean;
    klass: typeof Model;
    static attributeList: {};
    private static _scope;
    static extend(obj: any): any;
    static inherited(subclass: any): void;
    static scope(): Scope;
    static setJWT(token: string): void;
    static getJWT(): string;
    static fetchOptions(): RequestInit;
    static beforeFetch(url: RequestInfo, options: RequestInit): void;
    static afterFetch(response: Response, json: JSON): void;
    static getJWTOwner(): typeof Model;
    static all(): Promise<CollectionProxy<Model>>;
    static find(id: string | number): Promise<RecordProxy<Model>>;
    static first(): Promise<RecordProxy<Model>>;
    static where(clause: Object): Scope;
    static page(number: number): Scope;
    static per(size: number): Scope;
    static order(clause: Object | string): Scope;
    static select(clause: Object): Scope;
    static selectExtra(clause: Object): Scope;
    static stats(clause: Object): Scope;
    static includes(clause: string | Object | Array<any>): Scope;
    static merge(obj: Object): Scope;
    static url(id?: string | number): string;
    static fullBasePath(): string;
    static fromJsonapi(resource: japiResource, payload: japiDoc): any;
    static generateAuthHeader(jwt: string): string;
    constructor(attributes?: Object);
    clearErrors(): void;
    resetRelationTracking(includeDirective: Object): void;
    relationshipResourceIdentifiers(relationNames: Array<string>): Object;
    isType(jsonapiType: string): boolean;
    readonly resourceIdentifier: Object;
    attributes: Object;
    assignAttributes(attrs: Object): void;
    isPersisted(val?: boolean): boolean;
    isMarkedForDestruction(val?: boolean): boolean;
    isMarkedForDisassociation(val?: boolean): boolean;
    fromJsonapi(resource: japiResource, payload: japiDoc, includeDirective?: Object): any;
    readonly hasError: boolean;
    isDirty(relationships?: Object | Array<any> | string): boolean;
    changes(): Object;
    hasDirtyRelation(relationName: string, relatedModel: Model): boolean;
    dup(): Model;
    destroy(): Promise<any>;
    save(options?: Object): Promise<any>;
    private _initializeAttributes();
    private _writeRequest(requestPromise, callback);
    private _handleResponse(response, resolve, reject, callback);
    private _fetchOptions();
}
